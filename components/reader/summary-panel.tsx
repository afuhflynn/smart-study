"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Sparkles,
  RefreshCw,
  Copy,
  Share,
  BookOpen,
  AlertCircle,
} from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "sonner";

interface Document {
  id: string;
  title: string;
  content: string;
  chapters: { id: string; title: string; startIndex: number }[];
}

interface SummaryPanelProps {
  document: Document;
}

interface Summary {
  id: string;
  title: string;
  keyPoints: string[];
  mainIdeas: string[];
  actionItems: string[];
  difficulty: "Beginner" | "Intermediate" | "Advanced";
  readingTime: string;
  confidence: number;
  createdAt: string;
  documentId: string;
  chapterId?: string;
}

export function SummaryPanel({ document }: SummaryPanelProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [summaries, setSummaries] = useState<Summary[]>([]);
  const [selectedChapter, setSelectedChapter] = useState<string>("all");
  const [error, setError] = useState<string | null>(null);

  // Load existing summaries on component mount
  useEffect(() => {
    // For now, we'll generate a summary automatically when the component loads
    if (document && summaries.length === 0) {
      generateSummary();
    }
  }, [document]);

  const generateSummary = async () => {
    setIsGenerating(true);
    setError(null);

    try {
      // Get content for the selected chapter or entire document
      let contentToSummarize = "";
      let chapterId = null;

      if (selectedChapter === "all") {
        contentToSummarize = document.content;
      } else {
        const chapterIndex = document.chapters.findIndex(
          (ch) => ch.id === selectedChapter
        );
        if (chapterIndex !== -1) {
          const chapter = document.chapters[chapterIndex];
          const nextChapter = document.chapters[chapterIndex + 1];
          const startIndex = chapter.startIndex;
          const endIndex = nextChapter
            ? nextChapter.startIndex
            : document.content.length;
          contentToSummarize = document.content.slice(startIndex, endIndex);
          chapterId = selectedChapter;
        }
      }

      const response = await fetch("/api/summarize", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          content: contentToSummarize,
          documentId: document.id,
          chapterId: chapterId,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to generate summary: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        const newSummary: Summary = {
          ...data.summary,
          documentId: document.id,
          chapterId: chapterId,
        };

        // Replace existing summary for the same chapter/document
        setSummaries((prev) => {
          const filtered = prev.filter(
            (s) => !(s.documentId === document.id && s.chapterId === chapterId)
          );
          return [...filtered, newSummary];
        });

        toast.success("Summary generated successfully!");
      } else {
        throw new Error(data.error || "Failed to generate summary");
      }
    } catch (error) {
      console.error("Summary generation failed:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Failed to generate summary";
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async (summary: Summary) => {
    const text = `# ${summary.title}

## Key Points
${summary.keyPoints.map((point) => `• ${point}`).join("\n")}

## Main Ideas
${summary.mainIdeas.map((idea) => `• ${idea}`).join("\n")}

## Action Items
${summary.actionItems.map((item) => `• ${item}`).join("\n")}

Generated by SmartStudy AI`;

    try {
      await navigator.clipboard.writeText(text);
      toast.success("Summary copied to clipboard!");
    } catch (error) {
      toast.error("Failed to copy to clipboard");
    }
  };

  const getDifficultyColor = (difficulty: Summary["difficulty"]) => {
    switch (difficulty) {
      case "Beginner":
        return "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300";
      case "Intermediate":
        return "bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300";
      case "Advanced":
        return "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300";
      default:
        return "bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300";
    }
  };

  const getCurrentSummary = () => {
    return summaries.find(
      (s) =>
        s.documentId === document.id &&
        s.chapterId === (selectedChapter === "all" ? null : selectedChapter)
    );
  };

  const currentSummary = getCurrentSummary();

  return (
    <div className="h-full flex flex-col bg-white dark:bg-gray-900">
      {/* Header */}
      <div className="border-b border-gray-200 dark:border-gray-700 p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/50 dark:to-blue-900/50 rounded-lg">
              <Sparkles className="h-5 w-5 text-purple-600 dark:text-purple-400" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                AI Summary
              </h2>
              <p className="text-sm text-gray-600 dark:text-gray-300">
                Key insights and takeaways from {document.title}
              </p>
            </div>
          </div>

          <Button
            onClick={generateSummary}
            disabled={isGenerating}
            className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
          >
            {isGenerating ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4 mr-2" />
                {currentSummary ? "Regenerate" : "Generate Summary"}
              </>
            )}
          </Button>
        </div>

        {/* Chapter Selector */}
        <div className="flex flex-wrap gap-2">
          <Button
            variant={selectedChapter === "all" ? "default" : "outline"}
            size="sm"
            onClick={() => setSelectedChapter("all")}
          >
            All Chapters
          </Button>
          {document.chapters.map((chapter, index) => (
            <Button
              key={chapter.id}
              variant={selectedChapter === chapter.id ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedChapter(chapter.id)}
            >
              Ch. {index + 1}: {chapter.title.slice(0, 20)}...
            </Button>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-6">
        {/* Error Display */}
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg flex items-center"
          >
            <AlertCircle className="h-5 w-5 text-red-600 dark:text-red-400 mr-3 flex-shrink-0" />
            <div>
              <h4 className="font-medium text-red-800 dark:text-red-300">
                Summary Generation Failed
              </h4>
              <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
            </div>
          </motion.div>
        )}

        {isGenerating ? (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-4 w-3/4" />
                <Skeleton className="h-3 w-1/2" />
              </CardHeader>
              <CardContent className="space-y-3">
                <Skeleton className="h-3 w-full" />
                <Skeleton className="h-3 w-5/6" />
                <Skeleton className="h-3 w-4/5" />
              </CardContent>
            </Card>
          </div>
        ) : currentSummary ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Card className="border-0 shadow-lg">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">
                    {currentSummary.title}
                  </CardTitle>
                  <div className="flex items-center space-x-2">
                    <Badge
                      className={getDifficultyColor(currentSummary.difficulty)}
                    >
                      {currentSummary.difficulty}
                    </Badge>
                    <Badge variant="outline">
                      {currentSummary.readingTime}
                    </Badge>
                  </div>
                </div>
                <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-300">
                  <span className="flex items-center">
                    <BookOpen className="h-4 w-4 mr-1" />
                    Confidence: {currentSummary.confidence}%
                  </span>
                  <div className="flex space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(currentSummary)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm">
                      <Share className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>

              <CardContent className="space-y-6">
                {/* Key Points */}
                <div>
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                    🎯 Key Points
                  </h4>
                  <ul className="space-y-2">
                    {currentSummary.keyPoints.map((point, i) => (
                      <li key={i} className="flex items-start">
                        <span className="flex-shrink-0 w-2 h-2 bg-purple-600 rounded-full mt-2 mr-3" />
                        <span className="text-gray-600 dark:text-gray-300">
                          {point}
                        </span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Main Ideas */}
                <div>
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                    💡 Main Ideas
                  </h4>
                  <ul className="space-y-2">
                    {currentSummary.mainIdeas.map((idea, i) => (
                      <li key={i} className="flex items-start">
                        <span className="flex-shrink-0 w-2 h-2 bg-blue-600 rounded-full mt-2 mr-3" />
                        <span className="text-gray-600 dark:text-gray-300">
                          {idea}
                        </span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Action Items */}
                <div>
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-3">
                    ✅ Next Steps
                  </h4>
                  <ul className="space-y-2">
                    {currentSummary.actionItems.map((item, i) => (
                      <li key={i} className="flex items-start">
                        <span className="flex-shrink-0 w-2 h-2 bg-green-600 rounded-full mt-2 mr-3" />
                        <span className="text-gray-600 dark:text-gray-300">
                          {item}
                        </span>
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <div className="text-center py-12">
            <Sparkles className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
              No Summary Yet
            </h3>
            <p className="text-gray-500 dark:text-gray-400 mb-6">
              Generate an AI-powered summary to get key insights from this{" "}
              {selectedChapter === "all" ? "document" : "chapter"}.
            </p>
            <Button
              onClick={generateSummary}
              className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
            >
              <Sparkles className="h-4 w-4 mr-2" />
              Generate Summary
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}
